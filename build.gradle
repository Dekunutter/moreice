// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: 'maven-publish'
}

// Configuration that is shared between all subprojects in this gradle build
subprojects {
    // applies all plugins that are shared amoungst subprojects
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    java.toolchain.languageVersion = JavaLanguageVersion.of(java_version.toInteger())

    // Adds tasks for the creation of sources and javadoc JARs
    java.withSourcesJar()
    java.withJavadocJar()

    // Configuration for the task that builds the main JAR
    jar {
        // renames license file
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_id}" }
        }
        // sets manifest attributes within the jar
        manifest {
            attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : "Dekunutter",
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Dekunutter"
            ])
        }
    }

    // Configuration for the task that builds the sources JAR
    sourcesJar {
        // renames license file
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_id}" }
        }
    }

    // Determines which Maven repository dependencies are fetched from.
    repositories {
        // Fetch from central Maven 2
        mavenCentral()
    }

    // compilation settings for Gradle tasks that compile Java code
    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(java_version.toInteger())
    }

    // compilation settings for Gradle tasks that compile Javadocs
    tasks.withType(Javadoc).configureEach {
        failOnError false
    }

    // This block of code expands all declared replace properties in the specified resource targets.
    // A missing property will result in an error. Properties are expanded using ${} Groovy notation.
    // When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    processResources {
        // expand every property from gradle.properties
        def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
        stringProperties.each { inputs.property(it.key, it.value) }

        def files = ["META-INF/mods.toml", "pack.mcmeta"]

        files.each {
            filesMatching(it) {
                expand(stringProperties) {
                    escapeBackslash = true
                }
            }
        }
    }
}